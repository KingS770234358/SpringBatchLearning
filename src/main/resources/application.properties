spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/spring_batch_learning?useUnicode=true&characterEncoding=UTF8&useSSL=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
# /org/springframework/batch/core/schema-mysql.sql 这个.sql文件定义了一些列
# Job执行过程中的数据在数据库中的存储格式
spring.datasource.schema=classpath:/org/springframework/batch/core/schema-mysql.sql
# always后面不能有空格
spring.batch.initialize-schema=always
# SpringBatch中实现 Job嵌套时 配置的 【想要自动启动的Job名称】
# 是父Job在创建的时候get("xx")方法中填的名称
# spring.batch.job.names=parentJob
# spring.batch.job.names=JobWithlistener
# spring.batch.job.names=myJDBCItemReaderJob
# spring.batch.job.names=myXmlItemReaderJob
# spring.batch.job.names=myRestartItemStreamReaderJob
# spring.batch.job.names=myItemWriterJob
# spring.batch.job.names=myJDBCBatchItemWriterJob
# spring.batch.job.names=myFlatFileItemWriterJob
# spring.batch.job.names=myStaxEventItemWriterJob
# spring.batch.job.names=myFlatFileItemReaderJob
# spring.batch.job.names=myMultiFlatFileItemWriterJob
# spring.batch.job.names=myClassifierMultiFlatFileItemWriterJob
# spring.batch.job.names=myItemProcessorJob
# spring.batch.job.names=myErrorHandlingJob
# spring.batch.job.names=myRetryJob
# spring.batch.job.names=mySkipJob
# spring.batch.job.names=mySkipListenerJob
# 不自动启动Job，而是通过JobLauncher在指定的时机执行任务
spring.batch.job.enabled=false